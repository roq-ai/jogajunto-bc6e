generator client {
  provider = "prisma-client-js"
  previewFeatures = ["clientExtensions", "postgresqlExtensions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  extensions      = [pgcrypto]
}

model court {
  id                  String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name                String   @db.VarChar(255)
  location            String   @db.VarChar(255)
  availability_status Boolean
  user_id             String   @db.Uuid
  created_at          DateTime @default(now()) @db.Timestamp(6)
  updated_at          DateTime @default(now()) @db.Timestamp(6)
  user                user     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  match               match[]
}

model group {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name        String   @db.VarChar(255)
  description String?  @db.VarChar(255)
  user_id     String   @db.Uuid
  created_at  DateTime @default(now()) @db.Timestamp(6)
  updated_at  DateTime @default(now()) @db.Timestamp(6)
  user        user     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model match {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  date       DateTime @db.Date
  time       DateTime @db.Time(6)
  location   String   @db.VarChar(255)
  status     String   @db.VarChar(255)
  user_id    String   @db.Uuid
  court_id   String   @db.Uuid
  created_at DateTime @default(now()) @db.Timestamp(6)
  updated_at DateTime @default(now()) @db.Timestamp(6)
  court      court    @relation(fields: [court_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  user       user     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model organization {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  description String?  @db.VarChar(255)
  name        String   @db.VarChar(255)
  created_at  DateTime @default(now()) @db.Timestamp(6)
  updated_at  DateTime @default(now()) @db.Timestamp(6)
  user_id     String   @db.Uuid
  tenant_id   String   @db.VarChar(255)
  user        user     @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model ranking {
  id           String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  score        Int
  fair_play    Int
  playability  Int
  punctuality  Int
  availability Int
  user_id      String   @db.Uuid
  created_at   DateTime @default(now()) @db.Timestamp(6)
  updated_at   DateTime @default(now()) @db.Timestamp(6)
  user         user     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model user {
  id           String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email        String         @unique @db.VarChar(255)
  firstName    String?        @db.VarChar(255)
  lastName     String?        @db.VarChar(255)
  roq_user_id  String         @db.VarChar(255)
  tenant_id    String         @db.VarChar(255)
  created_at   DateTime       @default(now()) @db.Timestamp(6)
  updated_at   DateTime       @default(now()) @db.Timestamp(6)
  court        court[]
  group        group[]
  match        match[]
  organization organization[]
  ranking      ranking[]
}
